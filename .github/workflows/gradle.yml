# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Gradle

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

permissions:
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2.11.1
      with:
        generate-job-summary: 'true' # Valid values are 'always' (default), 'never', and 'on-failure'
        dependency-graph: generate
    - name: Execute Gradle build
      run: ./gradlew build --scan --info
    - name: Generate test coverage report
      run: ./gradlew jacocoTestReport
    - name: List coverage files for debugging
      run: |
        echo "Checking for coverage files..."
        find . -name "jacocoTestReport.xml" -type f
        ls -la jpasskit/build/reports/jacoco/test/ || echo "jpasskit coverage dir not found"
        ls -la jpasskit.server/build/reports/jacoco/test/ || echo "jpasskit.server coverage dir not found"
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./jpasskit/build/reports/jacoco/test/jacocoTestReport.xml,./jpasskit.server/build/reports/jacoco/test/jacocoTestReport.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        directory: ./
    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          **/build/reports/jacoco/test/
          **/build/reports/tests/test/

  deploy:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2.11.1

    - name: Publish
      env:
        JRELEASER_GITHUB_TOKEN: ${{ secrets.JRL_GITHUB_TOKEN }}
        JRELEASER_NEXUS2_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        JRELEASER_NEXUS2_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        JRELEASER_GPG_SECRET_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
        JRELEASER_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
      run: |
        VERSION_NO_V=${GITHUB_REF_NAME#v}
        echo "Releasing version: $VERSION_NO_V"
        ./gradlew clean :jpasskit:publish -Pversion=$VERSION_NO_V --info --stacktrace
        ./gradlew :jpasskit:jreleaserFullRelease -Pversion=$VERSION_NO_V --info --stacktrace

    - name: JReleaser output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jreleaser-release
        path: |
          out/jreleaser/trace.log
          out/jreleaser/output.properties

  snapshot-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.11.1

      - name: Read project version
        id: read_version
        run: |
          VERSION=$(grep '^version=' gradle.properties | cut -d'=' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Project version: $VERSION"

      - name: Publish SNAPSHOT (only if -SNAPSHOT)
        if: contains(steps.read_version.outputs.version, '-SNAPSHOT')
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.JRL_GITHUB_TOKEN }}
          JRELEASER_NEXUS2_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          JRELEASER_NEXUS2_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        run: |
          ./gradlew clean :jpasskit:publish --info --stacktrace
          ./gradlew :jpasskit:jreleaserDeploy --info --stacktrace

      - name: JReleaser output (SNAPSHOT)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-deploy-snapshot
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties
